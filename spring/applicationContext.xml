<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd">


    <bean id="baseDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <!-- pool sizing -->
        <property name="initialPoolSize" value="10" />
        <property name="minPoolSize" value="10" />
        <property name="maxPoolSize" value="100" />
        <property name="acquireIncrement" value="3" />
        <property name="maxStatements" value="0" />
        <!-- retries -->
        <property name="acquireRetryAttempts" value="30" />
        <property name="acquireRetryDelay" value="1000" /> <!-- 1s -->
        <property name="breakAfterAcquireFailure" value="false" />
        <!-- refreshing connections -->
        <property name="maxIdleTime" value="180" /> <!-- 3min -->
        <property name="maxConnectionAge" value="10" /> <!-- 1h -->
        <!-- timeouts and testing -->
        <property name="checkoutTimeout" value="5000" /> <!-- 5s -->
        <property name="idleConnectionTestPeriod" value="60" /> <!-- 60 -->
        <property name="testConnectionOnCheckout" value="true" />
        <property name="preferredTestQuery" value="SELECT 1" />
        <property name="testConnectionOnCheckin" value="true" />
    </bean>

    <!-- 主数据源-->
    <bean id="masterDataSource" parent="baseDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver" />
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/kaze?characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;autoReconnect=true&amp;useSSL=false" />
        <property name="user" value="root" />
        <property name="password" value="root" />
    </bean>
    <!-- 从数据源-->
    <bean id="slaveDataSource" parent="baseDataSource">
        <property name="driverClass" value="com.mysql.jdbc.Driver" />
        <property name="jdbcUrl" value="jdbc:mysql://localhost:3306/pao?characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;autoReconnect=true&amp;useSSL=false" />
        <property name="user" value="root" />
        <property name="password" value="root" />
    </bean>

    <bean id="dataSource" class="com.pwq.util.RoutingDataSource">
        <property name="targetDataSources">
            <map key-type="com.pwq.util.DataSourceType">
                <entry key="MASTER" value-ref="masterDataSource"/>
                <entry key="SLAVE" value-ref="slaveDataSource" />
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="masterDataSource" />
    </bean>

    <!-- Hibernate SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!-- 自动扫描的包 -->
        <property name="packagesToScan" value="com.pwq.entity"/>
        <property name="hibernateProperties">
            <props>
                <!-- MYSQL 数据库优化，不同数据库对应不同的key
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL57InnoDBDialect</prop>-->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
                <prop key="hibernate.query.substitutions">
                    true 'Y', false 'N'
                </prop>

                <!-- 2级缓存 发布到线上再开启，本地方便调试关闭-->
                <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory</prop>
                <prop key="hibernate.cache.use_second_level_cache">false</prop>
                <!-- 查询缓存 -->
                <prop key="hibernate.cache.use_query_cache">false</prop>

                <prop key="hibernate.current_session_context_class">org.springframework.orm.hibernate4.SpringSessionContext</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.show_sql">false</prop>
                <!--把所有的SQL语句都输出到控制台 。true：输出到控制台 发布到线上再改成false-->
                <prop key="hibernate.show_sql">false</prop>

                <!--连接池释放-->
                <prop key="hibernate.connection.release_mode">auto</prop>
                <prop key="hibernate.connection.autocommit">true</prop>

                <!-- Fetch Size 是设定JDBC的Statement读取数据的时候每次从数据库中取出的记录条数,我建议使用Oracle的最好将Fetch Size设到50-->
                <prop key="hibernate.jdbc.fetch_size">50</prop>
                <!-- atch Size是设定对数据库进行批量删除，批量更新和批量插入的时候的批次大小,我建议使用Oracle的最好将Batch Size设到30~50-->
                <prop key="hibernate.jdbc.batch_size">30</prop>

                <prop key="hibernate.autoReconnect">true</prop>
                <!-- 没表就自动建表，有的话则更新 -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <!-- Turn batching off for better error messages under PostgreSQL
                    <prop key="hibernate.jdbc.batch_size">0</prop> -->
            </props>
        </property>
    </bean>

    <bean id="dataSourceAdvice" class="com.pwq.util.DataSourceAdvice" />
    <aop:config>
        <aop:advisor pointcut="execution(* com.pwq.service.*ServiceImpl.*(..))"
                     advice-ref="dataSourceAdvice" />
    </aop:config>


    <bean id="transactionManager"
          class="org.springframework.orm.hibernate4.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>


    <!-- 开启切面自动代理 -->
    <aop:aspectj-autoproxy />

    <!--使用强大的切点表达式语言轻松定义目标方法 -->
    <aop:config>
        <!-- 通过aop定义事务增强切面 -->
        <!-- 特别说明:在项目开始前类命名统一规范很重要！！！ -->
        <aop:pointcut id="serviceMethod" expression="execution(* com.pwq.service.*ServiceImpl.*(..))" />
        <!-- 引用事务增强 -->
        <aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice" />
    </aop:config>

    <!-- 事务增强 ：设置只读事务等 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 事务属性定义 -->
        <tx:attributes>
            <!-- 申明以get开头的方法为只读事务 -->
            <tx:method name="get*" read-only="true" propagation="REQUIRED"/>
            <!-- 申明以load开头的方法为只读事务 -->
            <tx:method name="load*" read-only="true" propagation="REQUIRED"/>
            <!-- 申明以query开头的方法为只读事务 -->
            <tx:method name="query*" read-only="true" propagation="REQUIRED"/>
            <!-- 申明以find开头的方法为只读事务 -->
            <tx:method name="find*" read-only="true" propagation="REQUIRED"/>

            <tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
        </tx:attributes>
    </tx:advice>

    <!--<tx:annotation-driven/>-->

    <!-- 扫描cn.zeale.service包下所有标注@Service的服务组件 -->
    <context:component-scan base-package="com.pwq.controller" />
    <context:component-scan base-package="com.pwq.service" />
    <context:component-scan base-package="com.pwq.dao" />

</beans>